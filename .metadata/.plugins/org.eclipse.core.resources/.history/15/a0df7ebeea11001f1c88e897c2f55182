package com.ds.academy.client.naver.controller;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import com.ds.academy.client.member.service.NaverService;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;

@Controller
@RequiredArgsConstructor
@RequestMapping("/naver/*")
public class NaverLoginController {
	
	private String CLIENT_ID = "JeQw11B1TjRvCmFW1foW"; //애플리케이션 클라이언트 아이디값";
	private String CLI_SECRET = "yeDEG4UYMk";
	
	private final NaverService naverService;
	
	@GetMapping("/callback")
	public String callback(){
		
		
		
		return "member/check";
	}
	
	@RequestMapping("/invalidate")
	  public String invalidateSession(HttpSession session) {
	    session.invalidate();
	    return "redirect:/member/loginForm";
	  }
	
	@RequestMapping("/deleteToken")
	  public String deleteToken(HttpSession session, HttpServletRequest request, Model model, String accessToken) throws IOException {
	    String apiURL;
	    apiURL = "https://nid.naver.com/oauth2.0/token?grant_type=delete&";
	    apiURL += "client_id=" + CLIENT_ID;
	    apiURL += "&client_secret=" + CLI_SECRET;
	    apiURL += "&access_token=" + accessToken;
	    apiURL += "&service_provider=NAVER";
	    System.out.println("apiURL=" + apiURL);
	    String res = requestToServer(apiURL);
	    model.addAttribute("res", res);
	    session.invalidate();
	    return "member/check";
	  }
	
	  private String requestToServer(String apiURL) throws IOException {
		    return requestToServer(apiURL, "");
		  }
		  
		  private String requestToServer(String apiURL, String headerStr) throws IOException {
		    URL url = new URL(apiURL);
		    HttpURLConnection con = (HttpURLConnection)url.openConnection();
		    con.setRequestMethod("GET");
		    System.out.println("header Str: " + headerStr);
		    if(headerStr != null && !headerStr.equals("") ) {
		      con.setRequestProperty("Authorization", headerStr);
		    }
		    int responseCode = con.getResponseCode();
		    BufferedReader br;
		    System.out.println("responseCode="+responseCode);
		    if(responseCode == 200) { // 정상 호출
		      br = new BufferedReader(new InputStreamReader(con.getInputStream()));
		    } else {  // 에러 발생
		      br = new BufferedReader(new InputStreamReader(con.getErrorStream()));
		    }
		    String inputLine;
		    StringBuffer res = new StringBuffer();
		    while ((inputLine = br.readLine()) != null) {
		      res.append(inputLine);
		    }
		    br.close();
		    if(responseCode==200) {
		      return res.toString();
		    } else {
		      return null;
		    }
		  }
	
}
