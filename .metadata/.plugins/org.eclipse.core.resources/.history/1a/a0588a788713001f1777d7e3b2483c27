package com.ds.academy.client.naver.controller;




import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Map;

import org.apache.tomcat.util.json.JSONParser;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import com.ds.academy.client.member.service.NaverService;
import org.apache.tomcat.util.json.ParseException;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;

@Controller
@RequiredArgsConstructor
@RequestMapping("/naver/*")
public class NaverLoginController {
	
	
	
	private final NaverService naverService;
	
	@GetMapping("/callback")
	public String callback(HttpSession session, HttpServletRequest request, Model model) throws IOException, ParseException {
		
		
		 String code = request.getParameter("code"); 
		 String state = request.getParameter("state"); 
		 String redirectURI = URLEncoder.encode("http://localhost:8080/naver/callback", "UTF-8"); 
		 String accessToken = naverService.getAccessToken(code, state, redirectURI);
		 System.out.println(accessToken);
		 
		 String res = requestToServer(accessToken);
		 if(res != null && !res.equals("")) {
			 model.addAttribute("res", res);
			 Map<String, Object> parsedJson = new JSONParser(res).parseObject();
			 System.out.println(parsedJson);
			 
			 session.setAttribute("currentUser", res);
			 session.setAttribute("currentAT", parsedJson.get("access_token"));
			 session.setAttribute("currentRT", parsedJson.get("refresh_token"));
		 } else {
			 model.addAttribute("res", "Login failed!");
		 }
		
		return "member/check";
		
	}
	
	@RequestMapping("/invalidate")
	  public String invalidateSession(HttpSession session) {
	    session.invalidate();
	    return "redirect:/member/loginForm";
	  }
	
	
	/**
	   * 서버 통신 메소드
	   * @param apiURL
	   * @return
	   * @throws IOException
	   */
	  private String requestToServer(String apiURL) throws IOException {
	    return requestToServer(apiURL, "");
	  }
	  /**
	   * 서버 통신 메소드
	   * @param apiURL
	   * @param headerStr
	   * @return
	   * @throws IOException
	   */
	  private String requestToServer(String apiURL, String headerStr) throws IOException {
	    URL url = new URL(apiURL);
	    HttpURLConnection con = (HttpURLConnection)url.openConnection();
	    con.setRequestMethod("GET");
	    System.out.println("header Str: " + headerStr);
	    if(headerStr != null && !headerStr.equals("") ) {
	      con.setRequestProperty("Authorization", headerStr);
	    }
	    int responseCode = con.getResponseCode();
	    BufferedReader br;
	    System.out.println("responseCode="+responseCode);
	    if(responseCode == 200) { // 정상 호출
	      br = new BufferedReader(new InputStreamReader(con.getInputStream()));
	    } else {  // 에러 발생
	      br = new BufferedReader(new InputStreamReader(con.getErrorStream()));
	    }
	    String inputLine;
	    StringBuffer res = new StringBuffer();
	    while ((inputLine = br.readLine()) != null) {
	      res.append(inputLine);
	    }
	    br.close();
	    if(responseCode==200) {
	      return res.toString();
	    } else {
	      return null;
	    }
	  }
	
}
